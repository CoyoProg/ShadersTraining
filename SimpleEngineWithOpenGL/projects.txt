Summary

-- PART 1 --
001-004: Wall Pong
005-011: Scrolling background and component-based shooter
012-015: A* tower defense (optional)
-- PART 2 --
016-020: OpenGL Renderer for shooter
021-023: 3D basics
024-025: 3D sound manager (optional)
-- PART 3 --
026-028: Input system
029-032: Cameras
-- PART 4 --
033-036: Basic physics
037-042: Basic UI
043-044: Skelettal animation
-- PART 5 --
045-048: Intermediate graphics
049-052: Data files for levels


Chapters

001: Window, Log and Game class
002: Renderer
003: Wall pong render
004: Wall pong game

005: Actors and components
006: Texture load and resource manager + example
007: Sprite component, renderer drawSprite + example
008: Animated sprite and parrallax sprite component + example
009: Move component and astroids (+ Random and Actor, Vector2 improvements)
010: Input component and controllable Ship (update Game, Component and Actor)
011: Circle collisions (CircleCollisionComponent, Laser - update Game)

012: Grid and Tiles (Game update)
013: A* path finding (update Tile, Grid)
014: Enemy generation: NavComponent and enemy (update Game, Grid)
015: Tower placement and shoot Bullet (update Game and Grid)

016: Start with copy of project 011, abstract renderer, the game should be still working
017: OpenGL display. Update Window. RendererOGL, VertexArray.
018: Shader + shader files + Basic shader draw. ResourceManager shader load.
019: Display quads. Matrix4 and Vector3 + Transform in Actor (update Game, Component, Shader, Texture).
020: Display sprites' textures. Update Texture.

021: Update copy of project 020. Quaternions (Matrix4, Vector3 and Actor update). Delete RenderSDL. Sprites on OGL renderer.
022: Load mesh dans display it with its shader. Update renderer. Include rapidjson.
023: Add light (Phong), display meshes and sprites. Update Assets management.

(optional)
024: AudioSystem, SoundEvent (utiliser les linker/input vers les fichier 64), AudioComponent, Game update
025: Add audio in the game and modify the camera to listen sound

026: 2D astroid game with new keyboard input management.
027: Mouse input management, click to teleport ship
028: Controller input management, control the ship with twin sticks, shoot with right trigger

029: First person camera + model and crosshair
030: Follow camera with spring
031: Orbit camera on right mouse button
032: Camera follows a spline

033: Collision algorithms
034: BoxCollider and PhysicsSystem
035: Player shooting bouncing balls + targets
036: Wall collisions

037: Font loading
038: UI screen and pause menu
039: Buttons
040: Dialog boxes
041: Aiming reticule and radar
042: Localization

043: Loading skeleton and animations
044: Display and animate the skeletal mesh, update renderer, mesh, mesh load, vertex array

045: Mipmapping and anisotropic filtering
046: Rendering on a texture. Update renderer, rexture, follow actor, uiscreen and hud.
047: Defered shading. Update renderer, texture, game.
048: Point lights. Update game, renderer, gbuffer.

049: Loading json and lights.
050: Loading actor and components. Update Actor, Component and multiple components.
051: Saving game files. Update Assets, Game.
052: Loading and saving binaries (meshes). Update Assets, VertexArray.

NOTES